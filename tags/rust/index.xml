<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Santiago Pastorino</title><link>https://santiagopastorino.com/tags/rust/</link><description>Recent content in rust on Santiago Pastorino</description><generator>Hugo -- gohugo.io</generator><managingEditor>spastorino@gmail.com (Santiago Pastorino)</managingEditor><webMaster>spastorino@gmail.com (Santiago Pastorino)</webMaster><lastBuildDate>Wed, 18 Dec 2019 16:00:00 -0300</lastBuildDate><atom:link href="https://santiagopastorino.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Bisecting Rust Compiler Regressions with cargo-bisect-rustc</title><link>https://santiagopastorino.com/bisecting-rust-compiler-regressions-with-cargo-bisect-rustc/</link><pubDate>Wed, 18 Dec 2019 16:00:00 -0300</pubDate><author>spastorino@gmail.com (Santiago Pastorino)</author><guid>https://santiagopastorino.com/bisecting-rust-compiler-regressions-with-cargo-bisect-rustc/</guid><description>This article is cross-posted from Inside Rust blog.
Let&amp;rsquo;s say that you&amp;rsquo;ve just updated the Rust compiler version and have tried to compile your application and see a failure that wasn&amp;rsquo;t there before. That&amp;rsquo;s likely due to a regression in the compiler. We&amp;rsquo;ve just released cargo-bisect-rustc, a tool that makes it super easy to find exactly when the regression happened.
cargo-bisect-rustc automatically downloads rustc artifacts and tests them against a project you provide until it finds the regression.</description></item><item><title>How to Use Rust Non Lexical Lifetimes on Nightly</title><link>https://santiagopastorino.com/how-to-use-rust-non-lexical-lifetimes-on-nightly/</link><pubDate>Mon, 08 Jan 2018 16:00:00 -0300</pubDate><author>spastorino@gmail.com (Santiago Pastorino)</author><guid>https://santiagopastorino.com/how-to-use-rust-non-lexical-lifetimes-on-nightly/</guid><description>&lt;p>&lt;a href="https://twitter.com/nikomatsakis">Niko Matsakis&lt;/a>, &lt;a href="https://twitter.com/Nashenas88">Paul
Faria&lt;/a> and
&lt;a href="https://twitter.com/spastorino">I&lt;/a> have been working on Non Lexical
Lifetimes (NLL) during the &lt;a href="https://internals.rust-lang.org/t/announcing-the-impl-period-sep-18-dec-17/5676">impl
period&lt;/a>.
The work has landed on master and you can use it right now by installing
Rust nightly.&lt;/p></description></item><item><title>Rust Marketing Pitch</title><link>https://santiagopastorino.com/rust-marketing-pitch/</link><pubDate>Tue, 03 Jan 2017 16:00:00 -0300</pubDate><author>spastorino@gmail.com (Santiago Pastorino)</author><guid>https://santiagopastorino.com/rust-marketing-pitch/</guid><description>&lt;p>There’s been a very interesting and constructive debate about how to
market &lt;em>Rust&lt;/em>, mainly motivated by &lt;a href="http://words.stevekblanik.com/rust-is-more-than-safety">Steve Klabnik’s blog
post&lt;/a>, which was
later followed by &lt;a href="http://graydon2.dreamwidth.org/247406.html">Graydon
Hoare’s&lt;/a>, &lt;a href="https://thefeedbackloop.xyz/safety-is-rusts-fireflower/">Dave
Herman’s&lt;/a>, and
others writings. I consider both &lt;em>Mozilla&lt;/em> and the &lt;em>Rust&lt;/em> community are
doing an excellent marketing job, as I’ve never seen any other
language/community doing so, but there’s always room for more
improvements.&lt;/p></description></item></channel></rss>